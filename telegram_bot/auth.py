import aiohttp
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from main import DJANGO_API_URL
from scheduler import add_logged_user

router = Router()


class AuthState(StatesGroup):
    waiting_for_email = State()


@router.message(F.text == "/start")
async def start_handler(msg: types.Message, state: FSMContext):
    await msg.answer("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—é email –∞–¥—Ä–µ—Å—É –¥–ª—è –≤—Ö–æ–¥—É:")
    await state.set_state(AuthState.waiting_for_email)


@router.message(AuthState.waiting_for_email)
async def process_email(msg: types.Message, state: FSMContext):
    email = msg.text.strip()
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{DJANGO_API_URL}/api/telegram/login/", json={"email": email}) as resp:
            if resp.status == 200:
                data = await resp.json()
                await state.clear()
                await state.update_data(token=data['access'])

                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üìä –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å")],
                    ],
                    resize_keyboard=True
                )
                await msg.answer(
                    f"–ü—Ä–∏–≤—ñ—Ç, {data['username']}! –í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏.",
                    reply_markup=keyboard
                )
                await state.clear()
                await add_logged_user(msg.from_user.id, data['access'])
            else:
                await msg.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@router.message(AuthState.waiting_for_email)
@router.message(F.text == "üìä –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å")
async def weekly_stats_handler(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    from scheduler import logged_users  # ‚¨Ö —ñ–º–ø–æ—Ä—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏—Ö

    if user_id not in logged_users:
        await msg.answer("–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start.")
        return

    token = logged_users[user_id]

    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {token}"}
        async with session.get(f"{DJANGO_API_URL}/api/mood/stats/weekly/", headers=headers) as resp:
            if resp.status == 200:
                stats = await resp.json()
                message = (
                    "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</b>\n"
                    f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {stats['entries_count']}\n"
                    f"–°–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π: {stats['average_mood']:.1f} / 5 {stats['emotion_image']}\n"
                    f"–ù–∞–π—á–∞—Å—Ç—ñ—à–∞ –µ–º–æ—Ü—ñ—è: {stats['most_common_emotion']}"
                )
                await msg.answer(message, parse_mode="HTML")
            else:
                await msg.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ, –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –¥–∞–Ω—ñ.")
